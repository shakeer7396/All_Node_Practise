MERN TODO APP
FIRST CREATE FRONTEND REACT APP AS CLIENT AND BACKEND PART Server
*-> npm init then same as previous it is a configaration file and npm i express mongoose cors
--express for working on express module.
--mongoose is used for configuring mongodb from the local,
--cors used for backend developed api used in frontend without facing any policy errors 2 servers run without error.
--npm i -D nodemon for running the server without starting repeating again auto restart server.
--concurrently is used for running both frontend and backend at the same time so we instal this.

************BACKEND SETUP FOR TODO APPLICATION*****************************

server.js file
EXPRESS SETUP:-
1. importing express and initialize this a variable.
 a.const express = require('express');
 b.const app = express();
2. running port in bottom
 app.listen(5000,()=>console.log("SERVER RUNNING")) FOR CHECKING SERVER RUNNING OR NOT.
3. USE ROUTERS FOR DISPLAYING DATA ON THE BROWSER LIKE get, post, delete, put.
    app.get('/', (req, res) => { 
    res.send('<h1>Hello World</h1>');
});
    // "/" it is a router 2 parameters 
    a->req means request sending request to the url 
    b->res means it shows response as output on the browser 
    res.send what ever you want to send just use this 
4. SETUP SCRIPTS IN BACKEND PACKAGE JSON FILE LIKE 
"scripts": {
    "start": "node server",
    "server": "nodemon server" //FOR AUTO START SERVER
  },
5. MONGODB configaration SETUP
    a.First import mongoose and create Schema
    const mongoose = require("mongoose")
    const TaskSchema = require("./model.js");

    //IN MONGOOSE ATLAS CREATE A CLUSTER AND SETUP AS SAME PRREVIOUS 
    //BACKEND CONNECTING SCRIPT WAS GIVEN IS BELOW ON USERNAME AND PASSWORD
    ***IT Take 2 arguments script and debrications.
    mongoose.connect('mongodb+srv://Shaik_Shakeer:shaikshakeer@cluster0.muqcwcm.mongodb.net/?retryWrites=true&w=majority', { useUnifiedTopology: true, useNewUrlParser: true })
    mongodb+srv://Shaik_Shakeer:<db_password>@cluster0.muqcwcm.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
    .then(() => console.log('db connected'))
    .catch(err => console.log(err));

    ** MONGODB IS NOSQL DATABASE SO CREATE A SCHEMA MODEL 
    --- model.js ---
    const mongoose = require('mongoose');//IMPORTING MONGOOSE IMP

const TaskSchema = new mongoose.Schema({ // INITIATING WITH VARIABLE IT IS ACTUAL SCHEMA FOR US
    todo:{  //ITS A VARIABLE
        type:String,
        required:true
    },
    date:{
        type:Date,
        default:Date.now
    }
})

module.exports = mongoose.model('TaskSchema',TaskSchema);// EXPORTING MODULE AND  INITIATING WITH A NAME 'TaskSchema'.

SERVER.JS FILE
***POST REQUEST***
1. app.post('/addtask', async (req, res) => {//async for taking time for running
    const { todo } =req.body;//destructuring with value stored variable todo.handing todo data req.body
            //ADDING SO CREATING OBJECT WITH MODULE SCHEMA AND import above model.js for sending data.
    try {//HANDLING ERRORS EASILY
        const newData = new TaskSchema({
            todo: todo
        });
        await newData.save();//SAVING DATA & VALUE TO DATA BASE,AWAIT HANDLING THE DELAY RESPONSES. 
        const tasks = await TaskSchema.find();//INITIALIZE VARIABLE USE BELOW RETURN
        return res.json(tasks);
    } catch (err) {
        console.log(err.message);
        return res.status(500).json({ error: "Internal Server Error" });
    }
});

***GET REQUEST***
2. app.get("/gettask",async(req,res)=>{
    try{
        return res.json(await TaskSchema.find());//RETURNING VALUE, GETTING FROM TASKSCHEMA USING FIND.
    }
    catch(err){
        console.log(err)
    }
})

***DELETE REQUEST***
3. app.delete('/delete/:id',async(req,res)=>{//USING BY PARTICULAR ID SO :id 
    try{
        //findByIdAndDelete ITS A DELETE METHOD FOR PARTICULAR ID USING REQ.PARAMS URL. 
        await TaskSchema.findByIdAndDelete(req.params.id)
        return res.json(await TaskSchema.find())//RETURNING REMAINING DATA USING FIND
    }
    catch(err){
        console.log(err)
    }
})


******CONNECTING BACKEND WITH FRONTEND********

1.ENABLING CORS USING IMPORT
const cors=require("cors"); //importing 
app.use(cors({//CREATING OBJECT
    origin:'*' // DEFAULT ATTRIBUTE VALUE ORIGIN AS  "*" IT MEANS ACCESS ANY THING FROM BACKEND.
}))

//INSTALL npm i cors concurrently FOR RUNNING 2 SERVERS AT SAME TIME WITHOUT ERRORS.
IN PACKAGE.JSON ADD CLIENT AND DEV
"scripts": {
    "start": "node server",
    "server": "nodemon server",
    "client": "npm start --prefix client",
    "dev": "concurrently \"npm run server\" \"npm run client\" "
  },
// NPM RUN DEV  ITS A SINGLE COMMAND FOR RUNNING FRONT AND BACKEND SERVERS.

************FRONTEND SETUP FOR TODO APPLICATION*****************************

1.npx create-react-app client then cd client then npm start.
2.npm i axios for getting api data.
3.use useEffect for handling side effects in url.
4.using useState for creating a variable and used with storing data with item,setItem
5.using map method for fetching data to the browser.

-----STRUCTURE----
import React,{useEffect,useState} from 'react';
import axios from "axios";

const App = () => {
  const [item,setItem] = useState([]);
  const [newtask,setNewtask] = useState('');
  useEffect(()=>{
axios.get('http://localhost:5000/gettask').then(
  arr=>setItem(arr.data)
)
  },[])
  const submitHandler = e =>{
    e.preventDefault();
    axios.post('http://localhost:5000/addtask',{todo: newtask}).then(
      arr => setItem(arr.data)
    )
  }

  const deleteHandler = id =>{
    axios.delete(`http://localhost:5000/delete/${id}`).then(
      arr => setItem(arr.data)
    )
  }
  return (
    <div>
      <center>
        <form onSubmit={submitHandler}>
      <input type="text" value={newtask} onChange={(e)=>setNewtask(e.target.value)} />
      <input type="submit" value="submit" />
        </form>
        <br />
        {item.map(task => 
        <div key={task._id}>
          <h2>{task.todo}</h2>
          <button onClick={()=>deleteHandler(task._id)}>Delete</button>
        </div>)}
        
      </center>
    </div>
  )
}

export default App