JWT (JSON WEB TOKEN) BASED LOGIN AUTHENTICATION.
JWT IS  KIND OF MIDDLEWARE.
    * This is used for making an http request in a secured manner.
    * To maintain a session management.
    * To maintain a secure Authentication etc.
MISSING FEATURES WITHOUT JWT
1-Session Management --> Particular time 
2-Accessing routers securely --> Validation for security not directly
3-Secure Authentication --> Checking user by id 

TOKEN
--> Token means it creates encode value for every new user, particular user try to login again it was checked with tokens encode value will decoded and generate object type value like number.

--> Install modules for this application
* Server Side npm install express mongoose cors jsonwebtoken
* Client Side npm i axios react-router-dom redux react-redux redux-devtools-extension

-->First we can use and setup backend things then next frontend.

..Install dependencies and setup in package.json file
 npm i mongoose express cors jsonwebtoken,
 npm i -D nodemon concurrently 
"scripts": {
    "start": "node server",
    "server": "nodemon server",
    "client" : "npm start --prefix client",
    "dev" : "concurrently \"npm run server\" \"npm run client\" "
  },
  npm run server
BACKEND BASIC SETUP server.js

const express = require('express');
const mongoose = require('mongoose');
const Registeruser = require("./model")
const app = express();

MONGODB SETUP
mongoose.connect('mongodb+srv://Shaik_Shakeer:shaikshakeer@cluster0.muqcwcm.mongodb.net/?retryWrites=true&w=majority', { useUnifiedTopology: true, useNewUrlParser: true })
    .then(() => console.log('DB connected'))
    .catch(err => console.log(err));

app.listen(5000,()=>{
    console.log('Server Running')
})

MONGOOSE SCHEMA SETUP IN model.js

const mongoose = require("mongoose");

let Registeruser = new mongoose.Schema({
    username:{
        type: String,
        required:true,
    },
    email:{
        type: String,
        required:true,
        unique: true,
    },
    password:{
        type: String,
        required:true,
    },
    confirmpassword:{
        type: String,
        required: true,
    }
})

module.exports = mongoose.model("Registeruser",Registeruser);//First one is put anything its a model name, Second one is created schema.

DATA POSTING AND GETTING USING POST AND GET REQUEST server.js

const express = require('express');
const mongoose = require('mongoose');
const Registeruser = require("./model")
const jwt = require('jsonwebtoken')
const middleware = require("./middleware")

const cors = require("cors");

const app = express();
app.use(express.json())

app.use(cors({origin:"*"}))//RUNNING 2 SERVERS AT SAME TIME WITHOUT ERRORS

mongoose.connect('mongodb+srv://Shaik_Shakeer:shaikshakeer@cluster0.muqcwcm.mongodb.net/?retryWrites=true&w=majority', { useUnifiedTopology: true, useNewUrlParser: true })
    .then(() => console.log('DB connected'))
    .catch(err => console.log(err));

    app.post('/register',async(req,res)=>{
        try{
            const {username,email,password,confirmpassword}= req.body;
            let exist = await Registeruser.findOne({email})
            if(exist){
                return res.status(400).send("User Already Exist")
            }
            if(password !== confirmpassword){
                return res.status(400).send("Passwords are not matching")
            }
            let newUser = new Registeruser({
                username,
                email,
                password,
                confirmpassword,
            })
            await newUser.save();
            res.status(200).send("Registered Successfully")
        }
        catch(err){
            console.log(err)
            return res.status(500).send("Internal Server error")
        }
    })

    app.post('/login',async(req,res)=>{
        try{
            const {email,password} = req.body;
            let exist = await Registeruser.findOne({email})
            if(!exist){
                return res.status(400).send("User Not Exist");
            }
            if(exist.password !== password){
                return res.status(400).send("Invalid Creditials")
            }
            let payload = {
                user:{
                    id: exist.id
                }
            }
            jwt.sign(payload,`jwtSecret`,{expiresIn:3600000},(err,token)=>{
                if(err) throw err;
                return res.json({token})
            })
        }
        catch(err){
            console.log(err);
            return res.status(500).send("Server Error")
        }
    })

    app.get('/myprofile',middleware,async(req,res)=>{
        try{
            let exist = await Registeruser.findById(req.user.id);
            if(!exist){
                return res.status(400).send("User Not Found")
            }
            res.json(exist);
        }
        catch(err){
            console.log(err)
            return res.status(500).send("Server Error")
        }
    })

app.listen(5000,()=>{
    console.log('Server Running')
})

ADDING MIDDLEWARE FOR PROTECT ROUTES middleware.js

const jwt = require('jsonwebtoken');

module.exports = function(req,res,next){
    try{
        let token = req.header('x-token');
        if(!token){
            return res.status(400).send("Token Not Found");
        }
        let decode = jwt.verify(token,"jwtSecret");
        req.user = decode.user
        next();
    }
    catch(err){
        console.log(err)
        return res.status(500).send("Middleware Error")
    }
}